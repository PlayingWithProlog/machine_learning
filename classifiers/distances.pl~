/*
 * Relational Instance-Based Learning with Lists and Terms
 * Horv√°th, T., Wrobel, S. & Bohnebeck, U. Machine Learning (2001) 43: 53. doi:10.1023/A:1007668716498
 *
 *Learing with kernels and logical representations . Probablistic
 inductive logic programming.
 * */

% can we get rid of the cuts? The clauses need to be muttally exclusive.
% Probbaly makes sense to sort the terms, but maybe a set differnce
% kernel.
:-use_module(library(clpfd)).

%two objects the same the distance is Zero.
o_o_dis(X,X,D):-D #= 0,!.
% two objects that are both atoms are constants and should use constant
% dis
o_o_dis(X,Y,D):-
    atomic(X),
    atomic(Y),
    o_o_constantDis(X,Y,D),!.
%two objects are compound terms and the functors are differnt.
o_o_dis(X,Y,D):-
    X =..[XF|XRest],
    length(XRest,XN),
    Y =.. [YF|YRest],
    length(YRest,YN),
    dif(XF,YF),
    o_o_functorDis(XF-XN,YF-YN,D),!.
%two objects, the functor name is the same but the lengths are differnt
o_o_dis(X,Y,D):-
    X =..[XF|XRest],
    length(XRest,XN),
    Y =.. [YF|YRest],
    length(YRest,YN),
    dif(XN,YN),
    o_o_functorDis(XF-XN,YF-YN,D),!.

% two objects are compound terms and the funtors are the same. (name and
% length) ?
o_o_dis(X,Y,D):-
    X=..[F|XRest],
    Y=..[F|YRest],
    length(XRest,N),
    length(YRest,N),
    maplist(o_o_dis,XRest,YRest,Distances),
    sumlist(Distances,D0),
    o_o_functorDis(F-N,F-N,D1),
    D #= D1 +D0,!.
%Other cases
o_o_dis(X,Y,D):-
       D #= 0.


o_o_constantDis(X,Y,D):-
    dif(X,Y),
    D #= 1.
o_o_constantDis(X,X,D):-
    D #= 0.

o_o_functorDis(X,Y,D):-
    dif(X,Y),
    D #= 1.
o_o_functorDis(X,X,D):-
    D #= 0.

%find the median vote
topk_vote(T,Vote):-
    %keysort(T,ST), should already be sorted
    length(T,L),
    L2 #= L div 2,
    length(First,L2),
    append(First,[_Dis-Vote|_Rest],T).

o_oclass_disClass(O,O2-Class,D-Class):-
   o_o_dis(O,O2,D).

key_value_keyvalue(Key,Value,Key-Value).
%knn algorithm
%data is list of  pairs of terms and class
%e.g
%term(func(a,b))-pos
data_instance_k_classification(Data,I,K,C):-
    maplist(o_oclass_disClass(I),Data,DisAndClass),
    %maplist(key_value_keyvalue,Classes,Distances,Ds),
    keysort(DisAndClass,DSorted),
    length(TopK,K),
    append(TopK,_,DSorted),
    %this is not a very good way of selecting k as you may have many values with the same distance, and the sorting just cuts these off
    %Dsorted = [1-pos,3-pos,3-pos,3-neg,3-neg]
    %Topk =[1-pos,3-pos,3-pos]
    topk_vote(TopK,C).


%test data
%
% not a very good example, as functor/n differnces at the mo are only 1
% mis-match. Should probbaly have some kind of set kernel
data(X):-
X =[family(wally,tulip,willow)-pos,family(sam,louise)-neg,family(cathy,john,lucy,sam)-neg,family(alex,louise,neil)-neg,family(matilda,hypot)-pos,family(wally,tulip,annwho)-pos].

test(X):-
    X = family(big_stief,tulip,willow).



data2(X):-
    X=[[a,b,c]-pos,[b,c,d,e]-pos,[c,d,e]-pos,[z,a,b]-neg,[z,a,b,c,d]-neg].

test2(X):-
    X=[b,c].
